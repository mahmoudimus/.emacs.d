# -*- mode: snippet -*-
# name: Priority queue heap sort
# key: priorityqueueheapsort
# --
type ${1:Item} struct {
	value    ${2:data type} // The value of the item; arbitrary.
	priority ${3:data type}    // The priority of the item in the queue.
	// The index is needed by update and is maintained by the heap.Interface methods.
	index ${4:data type} // The index of the item in the heap.
}

// A PriorityQueue implements heap.Interface and holds Items.
type ${5:PriorityQueue} []*$1

func (pq $5) Len() int { return len(pq) }

func (pq $5) Less(i, j int) bool {
	// We want Pop to give us the highest, not lowest, priority so we use greater than here.
	return pq[i] > pq[j]
}

func (pq $5) Swap(i, j int) {
	pq[i], pq[j] = pq[j], pq[i]
	pq[i].index = ${6:i, possible type conversion to $4 Item.index}
	pq[j].index = ${6:j, possible type conversion to $4 Item.index}
}

func (pq *$5) Push(x interface{}) {
	n := ${7:len(*pq), possible type conversion to $4 Item.index}
	item := x.(*$1)
	item.index = n
	*pq = append(*pq, item)
}

func (pq *$5) Pop() interface{} {
	old := *pq
	n := len(old)
	item := old[n-1]
	item.index = ${8:-1, possible type conversion to $4 Item.index} // for safety
	*pq = old[0 : n-1]
	return item
}

// update modifies the priority and value of an Item in the queue.
func (pq *$5) update(item *Item, value string, priority int) {
	item.value = ${9:value, possible type conversion to $2 Item.value}
	item.priority = ${10:priority, possible type conversion to $3 Item.priority}
	heap.Fix(pq, ${11:item.index, possible type conversion to $4 Item.index})
}

// This example creates a PriorityQueue with some items, adds and manipulates an item,
// and then removes the items in priority order.
/* func Example_priorityQueue() {
	// Some items and their priorities.
	items := map[string]int{
		"banana": 3, "apple": 2, "pear": 4,
	}

	// Create a priority queue, put the items in it, and
	// establish the priority queue (heap) invariants.
	pq := make(PriorityQueue, len(items))
	i := 0
	for value, priority := range items {
		pq[i] = &Item{
			value:    value,
			priority: priority,
			index:    i,
		}
		i++
	}
	heap.Init(&pq)

	// Insert a new item and then modify its priority.
	item := &Item{
		value:    "orange",
		priority: 1,
	}
	heap.Push(&pq, item)
	pq.update(item, item.value, 5)

	// Take the items out; they arrive in decreasing priority order.
	for pq.Len() > 0 {
		item := heap.Pop(&pq).(*Item)
		fmt.Printf("%.2d:%s ", item.priority, item.value)
	}
	// Output:
	// 05:orange 04:pear 03:banana 02:apple
} */$0